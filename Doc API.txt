Certo, vamos retornar para o Python. É uma excelente escolha pela robustez das bibliotecas de dados.

Como vimos, os servidores da NASA podem estar instáveis, e a busca pelas palavras-chave exatas pode falhar e bloquear seu projeto.

Para garantir que vocês tenham um projeto 100% funcional para a sua apresentação e vídeo de demonstração, a abordagem mais segura e profissional é usar a API em Python com dados de exemplo (mock). Ela vai usar as suas palavras-chave e funcionar instantaneamente.

Depois, como anexo, vou te dar a versão que tenta a conexão ao vivo, mas com um aviso.

Solução Principal: API Python com Dados de Exemplo (Garantido para Funcionar)
Este código vai funcionar imediatamente e permitir que vocês finalizem o projeto sem depender da instabilidade dos servidores da NASA. Ele usa exatamente as palavras-chave que você pediu.

1. Preparação (se ainda não fez):

Bash

pip install flask flask-cors
2. Código da API (api_mock.py)

Python

from flask import Flask, jsonify
from flask_cors import CORS
from datetime import datetime

# ==============================================================================
# API COM DADOS DE EXEMPLO (MOCK) PARA O HACKATHON
# Usa as palavras-chave que você pediu. Funciona 100% do tempo.
# ==============================================================================

app = Flask(_name_)
CORS(app)

# --- Nossos dados de exemplo realistas, baseados nas suas palavras-chave ---
MOCK_DATA = {
    "TEMPO_NO2_L3": {
        "value": 0.000085,
        "units": "mol/m^2",
        "source_dataset": "TEMPO_NO2_L3 (Simulado)"
    },
    "M2I1NXASM": {
        "value": 850.5,
        "units": "m",
        "source_dataset": "M2I1NXASM / MERRA-2 PBLH (Simulado)"
    },
    "AIRS3STD": {
        "value": 295.15, # Em Kelvin (equivale a 22°C)
        "units": "K",
        "source_dataset": "AIRS3STD / AIRS Temperatura (Simulado)"
    },
    "CYGNSS": {
        "value": 5.8,
        "units": "m/s",
        "source_dataset": "CYGNSS / Velocidade do Vento (Simulado)"
    }
}

# --- Endpoints da API ---

@app.route('/')
def index():
    return "API de DADOS SIMULADOS da NASA para o Space Apps Challenge está no ar!"

@app.route('/api/tempo_no2')
def get_tempo_no2():
    return jsonify(MOCK_DATA["TEMPO_NO2_L3"])

@app.route('/api/merra2_pblh')
def get_merra2_pblh():
    return jsonify(MOCK_DATA["M2I1NXASM"])

@app.route('/api/airs_temperature')
def get_airs_temperature():
    return jsonify(MOCK_DATA["AIRS3STD"])

@app.route('/api/cygnss_wind')
def get_cygnss_wind():
    return jsonify(MOCK_DATA["CYGNSS"])

@app.route('/api/goes_clouds')
def get_goes_clouds():
    today_str = datetime.now().strftime('%Y-%m-%d')
    gibs_url_template = (
        'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/'
        'GOES-East_ABI_Band2_Red_Visible_1km/default/{date}/'
        'GoogleMapsCompatible_Level8/{{z}}/{{y}}/{{x}}.png'
    ).format(date=today_str)
    
    response = { "gibs_url_template": gibs_url_template, "source": "NASA GIBS" }
    return jsonify(response)

if _name_ == '_main_':
    app.run(debug=True, port=5000)
ANEXO: Versão da API com Conexão Ao Vivo (Use com Cuidado)
AVISO: Este código abaixo tentará se conectar aos servidores da NASA usando suas palavras-chave. Se os problemas de busca que enfrentamos antes persistirem, este script pode retornar erros ou "nenhum dado encontrado", bloqueando seu frontend.

Use a versão com dados de exemplo para gravar seu vídeo de demonstração.

1. Preparação:

Bash

pip install flask flask-cors earthaccess xarray netcdf4
2. Código da API (api_live.py)

Python

from flask import Flask, jsonify
from flask_cors import CORS
import earthaccess
import xarray as xr
import os
import numpy as np
from datetime import datetime

app = Flask(_name_)
CORS(app)

NYC_BOUNDING_BOX = (-74.3, 40.4, -73.7, 41.1)

# Tenta fazer o login. Requer o arquivo .netrc ou vai pedir senha no terminal.
try:
    earthaccess.login(strategy="netrc")
except Exception as e:
    print(f"Erro no login: {e}")

def fetch_and_process_data(search_term, variable_name, group_name=None):
    try:
        # Usando sua palavra-chave exata na busca
        search_results = earthaccess.search_data(
            keyword=search_term, # Usando 'keyword' para uma busca mais ampla
            short_name=search_term if '_' in search_term else None, # Tenta como Short Name se for mais específico
            bounding_box=NYC_BOUNDING_BOX,
            count=1
        )
        
        if not search_results:
            return {"error": f"Nenhum dado encontrado para: {search_term}"}, 404

        local_files = earthaccess.download(search_results, local_path="data")
        filepath = local_files[0]
        
        with xr.open_dataset(filepath, group=group_name) as ds:
            data_array = ds[variable_name]
            mean_value = float(np.nanmean(data_array.values))
            units = data_array.attrs.get('units', 'N/A')
        
        os.remove(filepath)
        
        return { "value": round(mean_value, 6), "units": units, "source_dataset": search_term }
    except Exception as e:
        return {"error": str(e)}, 500

@app.route('/api/tempo_no2')
def get_tempo_no2():
    # Palavra-chave do usuário: TEMPO_NO2_L3
    response = fetch_and_process_data(
        search_term='TEMPO_NO2_L3', 
        variable_name='nitrogendioxide_tropospheric_column',
        group_name='product_data'
    )
    return jsonify(response)

@app.route('/api/merra2_pblh')
def get_merra2_pblh():
    # Palavra-chave do usuário: M2I1NXASM
    response = fetch_and_process_data('M2I1NXASM', 'PBLH')
    return jsonify(response)

@app.route('/api/airs_temperature')
def get_airs_temperature():
    # Palavra-chave do usuário: AIRS3STD
    response = fetch_and_process_data('AIRS3STD', 'SurfAirTemp_D')
    return jsonify(response)

@app.route('/api/cygnss_wind')
def get_cygnss_wind():
    # Palavra-chave do usuário: CYGNSS
    # Nota: 'CYGNSS' é muito genérico, a chance de falha é alta.
    response = fetch_and_process_data('CYGNSS', 'wind_speed')
    return jsonify(response)

@app.route('/api/goes_clouds')
def get_goes_clouds():
    # Este endpoint é o mesmo, pois o GIBS é um serviço estável
    today_str = datetime.now().strftime('%Y-%m-%d')
    gibs_url_template = (
        'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/'
        'GOES-East_ABI_Band2_Red_Visible_1km/default/{date}/'
        'GoogleMapsCompatible_Level8/{{z}}/{{y}}/{{x}}.png'
    ).format(date=today_str)
    
    return jsonify({ "gibs_url_template": gibs_url_template, "source": "NASA GIBS" })

if _name_ == '_main_':
    if not os.path.exists('data'):
        os.makedirs('data')
    app.run(debug=True, port=5000)
Recomendação Final: Para garantir sua entrega no prazo, desenvolva e grave sua demo usando a primeira versão, api_mock.py. O sucesso no hackathon é sobre entregar uma visão funcional, e essa é a sua garantia.